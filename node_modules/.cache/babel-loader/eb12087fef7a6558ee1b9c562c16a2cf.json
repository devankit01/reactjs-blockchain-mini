{"ast":null,"code":"var _jsxFileName = \"/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/context/TransactionContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from \"ethers\";\nimport { contractabi, contractAddress } from '../utils/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/React.createContext();\nconst {\n  ethereum\n} = window;\n\nconst getEthereumContract = () => {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSigner();\n  const transactionsContract = new ethers.Contract(contractAddress, contractabi, signer);\n  console.log({\n    provider,\n    signer,\n    transactionsContract\n  });\n  return transactionsContract;\n};\n\nexport const TransactionProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [connectAccount, setconnectAccount] = useState('');\n  const [formdata, setformdata] = useState({\n    addressTo: '',\n    amount: '',\n    keyword: '',\n    message: ''\n  });\n  const [isloading, setisloading] = useState(false);\n  const [transactionCount, setTransactioncount] = useState(localStorage.getItem('transactionCount')); // Handle formdata\n\n  const handleChange = (e, name) => {\n    console.log(e);\n    setformdata(formdata => ({ ...formdata,\n      [e.target.name]: e.target.value\n    }));\n    console.log(formdata);\n  }; // Check MetaMask Connection\n\n\n  const checkMetaMaskisConnected = async () => {\n    if (!ethereum) return alert('Please install Metamask wallet');\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n    console.log(accounts);\n\n    if (accounts.length) {\n      setconnectAccount(accounts[0]); // GetAllTransactions()\n    } else {\n      console.log('No accounts found');\n    }\n  }; // Connect MetaMask\n\n\n  const connectWallet = async () => {\n    try {\n      if (!ethereum) return alert('Please install Metamask wallet');\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setconnectAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Perform Transaction\n\n\n  const sendTransaction = async () => {\n    console.log('Send Transaction');\n    const {\n      addressTo,\n      amount,\n      keyword,\n      message\n    } = formdata; // getContract\n\n    const transactionsContract = getEthereumContract();\n    console.log(transactionsContract);\n    const parsedamount = ethers.utils.parseEther(amount);\n    await ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [{\n        from: connectAccount,\n        to: addressTo,\n        gas: '0x5208',\n        // Hex value of Gas in Gwei 21000,\n        value: parsedamount._hex\n      }]\n    }); // Store Transaction to Blockchain\n\n    const transactionHash = await transactionsContract.addToBlockchain(addressTo, parsedamount, message, keyword);\n    setisloading(true);\n    await transactionHash.wait();\n    setisloading(false);\n    console.log(transactionHash.hash);\n    const transactionCount = await transactionsContract.get;\n  }; // OnLoad Window\n\n\n  useEffect(() => {\n    checkMetaMaskisConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      connectWallet,\n      connectAccount,\n      formdata,\n      setformdata,\n      handleChange,\n      sendTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TransactionProvider, \"dTiWusK3Cw2+RX/gJZq3uCA14Uc=\");\n\n_c = TransactionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["React","useEffect","useState","ethers","contractabi","contractAddress","TransactionContext","createContext","ethereum","window","getEthereumContract","provider","providers","Web3Provider","signer","getSigner","transactionsContract","Contract","console","log","TransactionProvider","children","connectAccount","setconnectAccount","formdata","setformdata","addressTo","amount","keyword","message","isloading","setisloading","transactionCount","setTransactioncount","localStorage","getItem","handleChange","e","name","target","value","checkMetaMaskisConnected","alert","accounts","request","method","length","connectWallet","error","sendTransaction","parsedamount","utils","parseEther","params","from","to","gas","_hex","transactionHash","addToBlockchain","wait","hash","get"],"sources":["/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/context/TransactionContext.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from \"ethers\";\n\nimport { contractabi, contractAddress } from '../utils/constants';\n\n\nexport const TransactionContext = React.createContext();\n\nconst { ethereum } = window;\n\nconst getEthereumContract = () => {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const transactionsContract = new ethers.Contract(contractAddress, contractabi, signer);\n\n    console.log({\n        provider,\n        signer,\n        transactionsContract\n    })\n\n    return transactionsContract;\n}\n\n\nexport const TransactionProvider = ({ children }) => {\n\n    const [connectAccount, setconnectAccount] = useState('');\n    const [formdata, setformdata] = useState({ addressTo: '', amount: '', keyword: '', message: '' })\n    const [isloading, setisloading] = useState(false);\n    const [transactionCount, setTransactioncount] = useState(localStorage.getItem('transactionCount'));\n\n\n    // Handle formdata\n    const handleChange = (e, name) => {\n        console.log(e)\n        setformdata((formdata) => ({ ...formdata, [e.target.name]: e.target.value }));\n        console.log(formdata)\n    }\n\n\n    // Check MetaMask Connection\n    const checkMetaMaskisConnected = async () => {\n        if (!ethereum) return alert('Please install Metamask wallet');\n\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n        console.log(accounts)\n\n        if (accounts.length) {\n            setconnectAccount(accounts[0])\n            // GetAllTransactions()\n\n        } else {\n            console.log('No accounts found')\n        }\n    }\n\n\n    // Connect MetaMask\n    const connectWallet = async () => {\n        try {\n            if (!ethereum) return alert('Please install Metamask wallet');\n            const accounts = await ethereum.request({ method: \"eth_requestAccounts\", });\n\n            setconnectAccount(accounts[0])\n\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n\n    // Perform Transaction\n    const sendTransaction = async () => {\n        console.log('Send Transaction')\n        const { addressTo, amount, keyword, message } = formdata;\n\n        // getContract\n        const transactionsContract = getEthereumContract();\n        console.log(transactionsContract)\n        const parsedamount = ethers.utils.parseEther(amount)\n\n        await ethereum.request({\n            method: 'eth_sendTransaction',\n            params: [{\n                from: connectAccount,\n                to: addressTo,\n                gas: '0x5208', // Hex value of Gas in Gwei 21000,\n                value: parsedamount._hex,\n\n            }]\n        })\n\n        // Store Transaction to Blockchain\n        const transactionHash = await transactionsContract.addToBlockchain(addressTo, parsedamount, message, keyword);\n        setisloading(true)\n        await transactionHash.wait();\n        setisloading(false)\n        console.log(transactionHash.hash)\n\n        const transactionCount = await transactionsContract.get\n\n    }\n\n\n\n    // OnLoad Window\n    useEffect(() => {\n        checkMetaMaskisConnected();\n    }, []);\n\n\n    return (\n        <TransactionContext.Provider value={{ connectWallet, connectAccount, formdata, setformdata, handleChange, sendTransaction }} >\n            {children}\n        </ TransactionContext.Provider >\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}