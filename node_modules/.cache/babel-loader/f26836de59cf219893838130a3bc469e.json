{"ast":null,"code":"var _jsxFileName = \"/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/context/TransactionContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from \"ethers\";\nimport { contractabi, contractAddress } from '../utils/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/React.createContext();\nconst {\n  ethereum\n} = window;\n\nconst getEthereumContract = () => {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSigner();\n  const transactionsContract = new ethers.Contract(contractAddress, contractabi, signer);\n  console.log({\n    provider,\n    signer,\n    transactionsContract\n  });\n  return transactionsContract;\n};\n\nexport const TransactionProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [connectAccount, setconnectAccount] = useState('');\n  const [formdata, setformdata] = useState({\n    addressTo: '',\n    amount: '',\n    keyword: '',\n    message: ''\n  });\n  const [isloading, setisloading] = useState(false);\n  const [transactionCount, setTransactionCount] = useState(localStorage.getItem('transactionCount'));\n  const [transactions, settransactions] = useState([]); // Handle formdata\n\n  const handleChange = (e, name) => {\n    console.log(e);\n    setformdata(formdata => ({ ...formdata,\n      [e.target.name]: e.target.value\n    }));\n    console.log(formdata);\n  }; // Check MetaMask Connection\n\n\n  const checkMetaMaskisConnected = async () => {\n    if (!ethereum) return alert('Please install Metamask wallet'); // Get All Transactions\n\n    const transactionsContract = getEthereumContract();\n    const transactions = await transactionsContract.getAllTransactions();\n    console.log('All Transactions  : ', transactions);\n\n    try {\n      settransactions(transactions);\n    } catch (e) {\n      settransactions(false);\n    } // Get All Accounts\n\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n    console.log('MetaMask Logged Account : ', accounts[0]);\n\n    if (accounts.length) {\n      setconnectAccount(accounts[0]);\n    } else {\n      console.log('No accounts found');\n    }\n  }; // Connect MetaMask\n\n\n  const connectWallet = async () => {\n    try {\n      if (!ethereum) return alert('Please install Metamask wallet'); // Set Account\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setconnectAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Perform Transaction\n\n\n  const sendTransaction = async () => {\n    console.log('Send Transaction');\n    const {\n      addressTo,\n      amount,\n      keyword,\n      message\n    } = formdata; // Get Contract\n\n    const transactionsContract = getEthereumContract();\n    console.log(transactionsContract);\n    const parsedamount = ethers.utils.parseEther(amount);\n    await ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [{\n        from: connectAccount,\n        to: addressTo,\n        gas: '0x5208',\n        // Hex value of Gas in Gwei 21000,\n        value: parsedamount._hex\n      }]\n    }); // Store Transaction to Blockchain\n\n    const transactionHash = await transactionsContract.addToBlockchain(addressTo, parsedamount, message, keyword);\n    setisloading(true);\n    await transactionHash.wait();\n    setisloading(false);\n    console.log('Transaction Hash : ', transactionHash.hash); // Get All Transaction Count \n\n    const transactionCount = await transactionsContract.getTransactionsCount();\n    setTransactionCount(transactionCount.toNumber());\n    console.log('Transaction Count : ', Number(transactionCount));\n  }; // OnLoad Window\n\n\n  useEffect(() => {\n    checkMetaMaskisConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      connectWallet,\n      connectAccount,\n      formdata,\n      setformdata,\n      handleChange,\n      sendTransaction,\n      transactions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionProvider, \"3nwX+HkOeqV/Gf2ca9qalucWRnI=\");\n\n_c = TransactionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["React","useEffect","useState","ethers","contractabi","contractAddress","TransactionContext","createContext","ethereum","window","getEthereumContract","provider","providers","Web3Provider","signer","getSigner","transactionsContract","Contract","console","log","TransactionProvider","children","connectAccount","setconnectAccount","formdata","setformdata","addressTo","amount","keyword","message","isloading","setisloading","transactionCount","setTransactionCount","localStorage","getItem","transactions","settransactions","handleChange","e","name","target","value","checkMetaMaskisConnected","alert","getAllTransactions","accounts","request","method","length","connectWallet","error","sendTransaction","parsedamount","utils","parseEther","params","from","to","gas","_hex","transactionHash","addToBlockchain","wait","hash","getTransactionsCount","toNumber","Number"],"sources":["/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/context/TransactionContext.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from \"ethers\";\n\nimport { contractabi, contractAddress } from '../utils/constants';\n\n\nexport const TransactionContext = React.createContext();\n\nconst { ethereum } = window;\n\nconst getEthereumContract = () => {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const transactionsContract = new ethers.Contract(contractAddress, contractabi, signer);\n\n    console.log({\n        provider,\n        signer,\n        transactionsContract\n    })\n\n    return transactionsContract;\n}\n\n\nexport const TransactionProvider = ({ children }) => {\n\n    const [connectAccount, setconnectAccount] = useState('');\n    const [formdata, setformdata] = useState({ addressTo: '', amount: '', keyword: '', message: '' })\n    const [isloading, setisloading] = useState(false);\n    const [transactionCount, setTransactionCount] = useState(localStorage.getItem('transactionCount'));\n    const [transactions, settransactions] = useState([]);\n\n\n    // Handle formdata\n    const handleChange = (e, name) => {\n        console.log(e)\n        setformdata((formdata) => ({ ...formdata, [e.target.name]: e.target.value }));\n        console.log(formdata)\n    }\n\n\n    // Check MetaMask Connection\n    const checkMetaMaskisConnected = async () => {\n\n        if (!ethereum) return alert('Please install Metamask wallet');\n\n\n\n        // Get All Transactions\n        const transactionsContract = getEthereumContract();\n        const transactions = await transactionsContract.getAllTransactions();\n        console.log('All Transactions  : ', transactions)\n        try {\n            settransactions(transactions)\n\n                }catch (e){\n        settransactions(false)\n\n    }\n\n    // Get All Accounts\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n    console.log('MetaMask Logged Account : ', accounts[0])\n\n    if (accounts.length) {\n        setconnectAccount(accounts[0])\n\n    } else {\n        console.log('No accounts found')\n    }\n}\n\n\n// Connect MetaMask\nconst connectWallet = async () => {\n    try {\n\n        if (!ethereum) return alert('Please install Metamask wallet');\n        // Set Account\n        const accounts = await ethereum.request({ method: \"eth_requestAccounts\", });\n        setconnectAccount(accounts[0])\n\n    } catch (error) {\n        console.log(error)\n    }\n\n}\n\n// Perform Transaction\nconst sendTransaction = async () => {\n    console.log('Send Transaction')\n    const { addressTo, amount, keyword, message } = formdata;\n\n    // Get Contract\n    const transactionsContract = getEthereumContract();\n    console.log(transactionsContract)\n    const parsedamount = ethers.utils.parseEther(amount)\n\n    await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [{\n            from: connectAccount,\n            to: addressTo,\n            gas: '0x5208', // Hex value of Gas in Gwei 21000,\n            value: parsedamount._hex,\n\n        }]\n    })\n\n    // Store Transaction to Blockchain\n    const transactionHash = await transactionsContract.addToBlockchain(addressTo, parsedamount, message, keyword);\n    setisloading(true)\n    await transactionHash.wait();\n    setisloading(false)\n    console.log('Transaction Hash : ', transactionHash.hash)\n\n    // Get All Transaction Count \n    const transactionCount = await transactionsContract.getTransactionsCount();\n    setTransactionCount(transactionCount.toNumber())\n    console.log('Transaction Count : ', Number(transactionCount))\n\n\n\n}\n\n\n\n// OnLoad Window\nuseEffect(() => {\n    checkMetaMaskisConnected();\n}, []);\n\n\nreturn (\n    <TransactionContext.Provider value={{ connectWallet, connectAccount, formdata, setformdata, handleChange, sendTransaction, transactions }} >\n        {children}\n    </ TransactionContext.Provider >\n)\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}