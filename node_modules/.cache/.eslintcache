[{"/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/index.js":"1","/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/App.js":"2","/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/reportWebVitals.js":"3","/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/pages/Page2/Crypto.js":"4","/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/pages/Page2/Home.js":"5","/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/pages/Home/Nav.js":"6","/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/context/TransactionContext.js":"7","/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/utils/constants.js":"8","/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/pages/Page2/Ethscan.js":"9"},{"size":576,"mtime":1651399356559,"results":"10","hashOfConfig":"11"},{"size":504,"mtime":1651415830315,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1651352583152,"results":"13","hashOfConfig":"11"},{"size":3803,"mtime":1651434719034,"results":"14","hashOfConfig":"11"},{"size":3433,"mtime":1651438178075,"results":"15","hashOfConfig":"11"},{"size":579,"mtime":1651415682598,"results":"16","hashOfConfig":"11"},{"size":4102,"mtime":1651437442252,"results":"17","hashOfConfig":"11"},{"size":183,"mtime":1651414644694,"results":"18","hashOfConfig":"11"},{"size":2566,"mtime":1651434672159,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"qvxgnq",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},"/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/index.js",[],[],[],"/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/App.js",[],[],"/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/reportWebVitals.js",[],[],"/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/pages/Page2/Crypto.js",[],[],"/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/pages/Page2/Home.js",["51","52"],[],"\nimport './style.css';\n\n\nimport React, { useContext } from \"react\";\nimport { TransactionContext } from '../../context/TransactionContext'\nimport Nav from '../Home/Nav';\n\nexport function Home() {\n\n  const { connectWallet, connectAccount, formdata, sendformData, handleChange, sendTransaction, transactions } = useContext(TransactionContext);\n\n  const handleSubmit = (e) => {\n    console.log('Form Submitted')\n    const { addressTo, amount, keyword, message } = formdata;\n    e.preventDefault();\n    console.log('Form data : ', formdata)\n    if (!addressTo || !amount || !keyword || !message) return;\n\n    sendTransaction();\n  }\n\n  // Date Convert\n  const convertDate = (val) => {\n    // console.log(val.timestamp)\n    let date = new Date(Number(val.timestamp) * 1000).toLocaleString();\n    return date;\n  }\n\n\n  return (\n    <div className=\"App\">\n\n      <Nav />\n      <br />\n      {!connectAccount &&\n        <button\n          type=\"button\"\n          class=\"btn\"\n          onClick={connectWallet}\n        >Connect wallet</button>}\n\n      <h3>{connectAccount && <p>Logged Account : {connectAccount}</p>}</h3>\n\n      <div className=\"main__row\">\n        <div>\n          <h2>Transfer Ethereum </h2>\n          <div class=\"form-group\">\n            <h5 for=\"\" class=\"form-label mt-4\">Account Address</h5>\n            <input type=\"text\" class=\"form-control\" aria-describedby=\"emailHelp\" placeholder=\"Account Address\" name=\"addressTo\" onChange={handleChange} />\n\n            <h5 for=\"\" class=\"form-label mt-4\">Amount</h5>\n            <input type=\"text\" class=\"form-control\" aria-describedby=\"emailHelp\" placeholder=\"Amount\" name=\"amount\" onChange={handleChange} />\n            <h5 for=\"\" class=\"form-label mt-4\">Add GIF</h5>\n            <input type=\"text\" class=\"form-control\" aria-describedby=\"emailHelp\" placeholder=\"Add GIF\" name=\"keyword\" onChange={handleChange} />\n\n            <h5 for=\"\" class=\"form-label mt-4\">Message </h5>\n            <input type=\"text\" class=\"form-control\" aria-describedby=\"emailHelp\" placeholder=\"Message\" name=\"message\" onChange={handleChange} />\n\n            <br />\n            <br />\n            <button type=\"button\" class=\"btn btn-primary mt-4\" onClick={handleSubmit}>Send Now</button>\n          </div>\n        </div>\n\n        <div>\n          <div class=\"eth__card\">\n          <img src=\"https://img.icons8.com/fluency/48/000000/ethereum.png\" />\n\n            <h3>Premium Ethereum Card</h3>\n            <h4>Account Address <br /> <br /> {connectAccount.slice(0, 30)}..</h4>\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <br />\n        <hr />\n        <br />\n        <h2>All Contract Transactions</h2>\n\n        <table>\n          <tr>\n\n            <th>Sender</th>\n            <th>Receiver</th>\n            <th>keyword</th>\n            <th>Message</th>\n            <th>Amount</th>\n            <th>Timestamp</th>\n\n\n          </tr>\n          {transactions.map((val, id) => {\n            return (\n              <>\n                <tr key={id}>\n                  <td className=\"\">{val.sender.slice(0, 10)}..</td>\n\n                  <td className=\"\">{val.receiver.slice(0, 10)}..</td>\n\n                  <td>{val.keyword}</td>\n                  <td>{val.message}</td>\n                  <td>{Number(val.amount._hex) / 10 ** 18}</td>\n\n\n                  <td>{convertDate(val)}</td>\n\n                </tr>\n              </>\n            );\n          })}\n\n\n        </table>\n      </div>\n    </div >\n  );\n}\n","/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/pages/Home/Nav.js",[],[],"/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/context/TransactionContext.js",["53","54","55"],[],"import React, { useEffect, useState } from 'react';\nimport { ethers } from \"ethers\";\n\nimport { contractabi, contractAddress } from '../utils/constants';\n\n\nexport const TransactionContext = React.createContext();\n\nconst { ethereum } = window;\n\nconst getEthereumContract = () => {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const transactionsContract = new ethers.Contract(contractAddress, contractabi, signer);\n\n    console.log({\n        provider,\n        signer,\n        transactionsContract\n    })\n\n    return transactionsContract;\n}\n\n\nexport const TransactionProvider = ({ children }) => {\n\n    const [connectAccount, setconnectAccount] = useState('');\n    const [formdata, setformdata] = useState({ addressTo: '', amount: '', keyword: '', message: '' })\n    const [isloading, setisloading] = useState(false);\n    const [transactionCount, setTransactionCount] = useState(localStorage.getItem('transactionCount'));\n    const [transactions, setTransactions] = useState([]);\n\n\n    // Handle formdata\n    const handleChange = (e, name) => {\n        console.log(e)\n        setformdata((formdata) => ({ ...formdata, [e.target.name]: e.target.value }));\n        console.log(formdata)\n    }\n\n    const getAllTransactions = async () => {\n        const transactionsContract = getEthereumContract();\n        const transactions = await transactionsContract.getAllTransactions();\n        console.log('All Transactions  : ', transactions)\n        setTransactions(transactions);\n    }\n\n    // Check MetaMask Connection\n    const checkMetaMaskisConnected = async () => {\n\n        if (!ethereum) return alert('Please install Metamask wallet');\n\n\n        // Get All Accounts\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n        console.log('MetaMask Logged Account : ', accounts[0])\n        \n        getAllTransactions();\n\n\n        if (accounts.length) {\n            setconnectAccount(accounts[0])\n\n\n        } else {\n            console.log('No accounts found')\n        }\n    }\n\n\n    // Connect MetaMask\n    const connectWallet = async () => {\n        try {\n\n            if (!ethereum) return alert('Please install Metamask wallet');\n            // Set Account\n            const accounts = await ethereum.request({ method: \"eth_requestAccounts\", });\n            setconnectAccount(accounts[0])\n\n            // Get All Transactions\n            getAllTransactions();\n\n\n\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n\n    // Perform Transaction\n    const sendTransaction = async () => {\n        console.log('Send Transaction')\n        const { addressTo, amount, keyword, message } = formdata;\n\n        // Get Contract\n        const transactionsContract = getEthereumContract();\n        console.log(transactionsContract)\n        const parsedamount = ethers.utils.parseEther(amount)\n\n        await ethereum.request({\n            method: 'eth_sendTransaction',\n            params: [{\n                from: connectAccount,\n                to: addressTo,\n                gas: '0x5208', // Hex value of Gas in Gwei 21000,\n                value: parsedamount._hex,\n\n            }]\n        })\n\n        // Store Transaction to Blockchain\n        const transactionHash = await transactionsContract.addToBlockchain(addressTo, parsedamount, message, keyword);\n        setisloading(true)\n        await transactionHash.wait();\n        setisloading(false)\n        console.log('Transaction Hash : ', transactionHash.hash)\n\n        // Get All Transaction Count \n        const transactionCount = await transactionsContract.getTransactionsCount();\n        setTransactionCount(transactionCount.toNumber())\n        console.log('Transaction Count : ', Number(transactionCount))\n\n\n\n    }\n\n\n\n    // OnLoad Window\n    useEffect(() => {\n        checkMetaMaskisConnected();\n    }, []);\n\n\n    return (\n        <TransactionContext.Provider value={{ connectWallet, connectAccount, formdata, setformdata, handleChange, sendTransaction, transactions }} >\n            {children}\n        </ TransactionContext.Provider >\n    )\n}","/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/utils/constants.js",[],[],"/home/appventurez/Desktop/MyStuff/Blockchain  JS/Krypto/Crypto/react-crypto/client/src/pages/Page2/Ethscan.js",["56","57","58"],[],"import Axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Nav from \"../Home/Nav\";\nimport './style.css';\n\n\nexport function Ethscan() {\n\n  const [records, setrecords] = useState();\n  const [acc, setacc] = useState('');\n\n  const getdata = (account) => {\n    console.log(account)\n    Axios.get(\n      `https://api-rinkeby.etherscan.io/api?module=account&action=txlist&address=${account}&sort=desc`\n    ).then((res) => {\n\n      if (res.data.result.length > 0) {\n        setrecords(res.data.result);\n\n      }\n      else {\n        setrecords(false)\n      }\n\n      console.log(res.data.result.length)\n\n      // setrecords(false)\n\n    });\n  };\n\n  const handleSubmit = () => {\n    // console.log(acc);\n    getdata(acc);\n  }\n\n  const convertDate = (val) => {\n    // console.log(val.timeStamp)\n    let date = new Date(Number(val.timeStamp) * 1000).toLocaleString();\n    return date;\n  }\n\n  return (\n    <div className=\"App crypto\">\n      <Nav />\n      <h1>Get Transactions</h1>\n      <input\n        type=\"text\"\n        class=\"input_box\"\n        placeholder=\"Search for address\"\n        onChange={(e) => {\n          setacc(e.target.value);\n        }}\n      />\n      <button onClick={handleSubmit} class='btn'>Search</button>\n      <br />\n      <br />\n\n      <div className=\"crypto__coins\">\n        {records &&\n          <div >\n            <table>\n              <tr>\n\n                <th>HashID</th>\n                <th>Timestamp</th>\n\n                <th>Block Number</th>\n                <th>Message</th>\n\n                <th>From</th>\n                <th>To</th>\n\n                <th>Ethereum (Send/Receive)</th>\n\n\n\n              </tr>\n              {records.map((val, id) => {\n                return (\n                  <>\n                    <tr key={id}>\n                      <td className=\"rank\">{val.hash.slice(0, 10)}..</td>\n                      <td className=\"\">{convertDate(val)}</td>\n\n                      <td className=\"\">{val.blockNumber}</td>\n                      <td>{val.value / 10 ** 18 == 0 ? 'Info Added to blockchain ' : val.value / 10 ** 18 == 0.1 ? 'Added Ethereum from Testnet' : 'Transferred Ethereum'}</td>\n\n                      <td>{val.from.slice(0, 10)}..</td>\n\n                      <td>{val.to.slice(0, 10) ? val.to.slice(0, 10) + '..' : 'Contract Creation'}</td>\n\n                      <td>{val.value / 10 ** 18}</td>\n\n\n                    </tr>\n                  </>\n                );\n              })}\n\n\n            </table>\n          </div>\n        }\n\n        {!records && 'No Address'}\n      </div>\n    </div>\n  )\n}\n\n",{"ruleId":"59","severity":1,"message":"60","line":11,"column":52,"nodeType":"61","messageId":"62","endLine":11,"endColumn":64},{"ruleId":"63","severity":1,"message":"64","line":68,"column":11,"nodeType":"65","endLine":68,"endColumn":78},{"ruleId":"59","severity":1,"message":"66","line":30,"column":12,"nodeType":"61","messageId":"62","endLine":30,"endColumn":21},{"ruleId":"59","severity":1,"message":"67","line":31,"column":12,"nodeType":"61","messageId":"62","endLine":31,"endColumn":28},{"ruleId":"68","severity":1,"message":"69","line":134,"column":8,"nodeType":"70","endLine":134,"endColumn":10,"suggestions":"71"},{"ruleId":"59","severity":1,"message":"72","line":2,"column":10,"nodeType":"61","messageId":"62","endLine":2,"endColumn":19},{"ruleId":"73","severity":1,"message":"74","line":88,"column":49,"nodeType":"75","messageId":"76","endLine":88,"endColumn":51},{"ruleId":"73","severity":1,"message":"74","line":88,"column":107,"nodeType":"75","messageId":"76","endLine":88,"endColumn":109},"no-unused-vars","'sendformData' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'isloading' is assigned a value but never used.","'transactionCount' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkMetaMaskisConnected'. Either include it or remove the dependency array.","ArrayExpression",["77"],"'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"78","fix":"79"},"Update the dependencies array to be: [checkMetaMaskisConnected]",{"range":"80","text":"81"},[3862,3864],"[checkMetaMaskisConnected]"]